"use strict";let e=!1;class n{constructor(e){this.orderBy="DESC",this._supportEvents=["action","done","allDone"],this._eventFn={action:{},done:{},allDone:{}},this.orderBy=e,this.queue=[]}enQueue(n=(()=>{}),t={name:"",weight:0,series:!0,exec:!1,status:"wait"}){let o=this.queue.find((e=>e.actionInfo.name===t.name));o?(o.actionFn=n,o.actionInfo=Object.assign(Object.assign(Object.assign({},o.actionInfo),t),{status:"wait"}),e&&console.info("【 ActionManager log 】交互入队过程中发现交互已存在，更新交互信息",o)):(this.queue.push({actionFn:n,actionInfo:Object.assign(Object.assign({series:!0,exec:!1},t),{status:"wait"})}),e&&console.info("【 ActionManager log 】交互入队",t)),this.queue.sort(((e,n)=>"ASC"===this.orderBy?e.actionInfo.weight-n.actionInfo.weight:n.actionInfo.weight-e.actionInfo.weight)),e&&console.info("【 ActionManager log 】交互排序",this.queue)}unQueue(){let n=this.queue.find((e=>"start"===e.actionInfo.status&&e.actionInfo.series));if(n)return void(e&&console.info("【 ActionManager log 】交互正在执行，出队操作被阻止",n.actionInfo));let t=this.queue.find((e=>"wait"===e.actionInfo.status));if(!t)return e&&console.info("【 ActionManager log 】交互已全部结束"),void Object.keys(this._eventFn.allDone).forEach((n=>{e&&console.info(`【 ActionManager log 】allDone 事件监听函数 ${n} 被触发`,this.queue),this._eventFn.allDone[n].fn(this.queue),this._eventFn.allDone[n]&&this._eventFn.allDone[n].once&&(this._eventFn.allDone[n].fn=()=>{},e&&console.info(`【 ActionManager log 】allDone 事件监听函数 ${n} 被移除`,this.queue))}));e&&console.info(`【 ActionManager log 】${t.actionInfo.name} 交互执行`,t.actionInfo),t.actionInfo.status="start",t.actionFn(t.actionInfo,this.queue),t.actionInfo.series||(e&&console.info(`【 ActionManager log 】${t.actionInfo.name} 是非串行交互，故继续执行下个交互`),this.unQueue()),Object.keys(this._eventFn.action).forEach((n=>{e&&console.info(`【 ActionManager log 】action 事件监听函数 ${n} 被触发`,t.actionInfo),this._eventFn.action[n].fn(t.actionInfo,this.queue),this._eventFn.action[n]&&this._eventFn.action[n].once&&(this._eventFn.action[n].fn=()=>{},e&&console.info(`【 ActionManager log 】action 事件监听函数 ${n} 被移除`,t.actionInfo))}))}done(n=""){let t=this.queue.find((e=>e.actionInfo.name===n));t?(e&&console.info(`【 ActionManager log 】${t.actionInfo.name} 交互结束`,t.actionInfo),t.actionInfo.status="end",Object.keys(this._eventFn.done).forEach((n=>{e&&console.info(`【 ActionManager log 】done 事件监听函数 ${n} 被触发`,t.actionInfo),this._eventFn.done[n].fn(t.actionInfo,this.queue),this._eventFn.done[n]&&this._eventFn.done[n].once&&(this._eventFn.done[n].fn=()=>{},e&&console.info(`【 ActionManager log 】done 事件监听函数 ${n} 被移除`,t.actionInfo))})),this.unQueue()):e&&console.info(`【 ActionManager log 】执行 ${n} 交互结束时发生错误，在交互队列中未找到该交互！`)}on(n,t=(()=>{}),o={namespace:"",once:!1}){return"string"==typeof n&&n?"function"!=typeof t?(console.error("【 ActionManager Action.on error 】 fn must be a function!"),this):this._supportEvents.indexOf(n)<0?(console.error('【 ActionManager Action.on error 】 event only supports "action"、"done"、"allDone"!'),this):(o.namespace||(o.namespace=`${n}_fn_${Object.keys(this._eventFn[n]).length+1}`),e&&console.info(`【 ActionManager log 】注册 ${n} 事件监听函数 ${o.namespace}`,o),this._eventFn[n][o.namespace]={fn:t,once:o.once},this):(console.error("【 ActionManager Action.on error 】 event must be a string!"),this)}off(n="action",t=""){return n?this._supportEvents.indexOf(n)<0?(console.error('【 ActionManager Action.off error 】 event only supports "action"、"done"、"allDone"!'),this):""===t?(e&&console.info(`【 ActionManager log 】移除 ${n} 事件所有监听函数`),this._eventFn[n]={},this):(e&&console.info(`【 ActionManager log 】移除 ${n} 事件监听函数 ${t}`),this._eventFn[n][t].fn=()=>{},this):(e&&console.info("【 ActionManager log 】移除所有事件监听函数"),this._eventFn={action:{},done:{},allDone:{}},this)}clear(){return e&&console.info("【 ActionManager log 】清空交互队列"),this.queue.forEach((e=>{"wait"===e.actionInfo.status&&e.actionInfo.exec&&e.actionFn(e.actionInfo,this.queue)})),this.queue=[],this}}var t=new class{constructor(){this._actions={__DEFAULT__:new n},this._activated="__DEFAULT__"}debug(){e=!0}init(t="__DEFAULT__",o="DESC"){return e&&console.info(`【 ActionManager log 】初始化交互实例 ${t}`),this._actions[t]=new n(o),this.use(t),this}use(n="__DEFAULT__"){return e&&console.info(`【 ActionManager log 】激活交互实例 ${n}`),this._activated=n,this}enQueue(e=(()=>{}),n={name:"",weight:0,series:!0,exec:!1,status:"wait"}){return""===n.name?(console.error("【 ActionManager.enQueue error 】 actionInfo.name cannot be empty!"),this):(this._actions[this._activated].enQueue(e,n),this)}start(){return e&&console.info(`【 ActionManager log 】启动交互实例 ${this._activated}`),this._actions[this._activated].unQueue(),this}done(e=""){return""===e?(console.error("【 ActionManager.done error 】 actionName cannot be empty!"),this):(this._actions[this._activated].done(e),this)}on(e,n,t){return this._actions[this._activated].on(e,n,t),this}off(e="action",n="",t=""){return t=t||this._activated,this._actions[t]&&this._actions[t].off(e,n),this}clear(e){return e=e||this._activated,this._actions[e]&&this._actions[e].clear(),this}getActionQueue(e){return e=e||this._activated,this._actions[e].queue}};let o=!1;class s{constructor(){this.dialogInfo={name:"",data:{}},this._supportEvents=["show","close"],this._eventFn={show:{},close:{}}}show(e={name:"",data:{}}){o&&console.info(`【 DialogManager log 】${e.name} 被打开`),this.dialogInfo=e,Object.keys(this._eventFn.show).forEach((n=>{o&&console.info(`【 DialogManager log 】show 事件监听函数 ${n} 被触发`,e),this._eventFn.show[n].fn(e),this._eventFn.show[n]&&this._eventFn.show[n].once&&(this._eventFn.show[n].fn=()=>{},o&&console.info(`【 DialogManager log 】show 事件监听函数 ${n} 被移除`,e))}))}close(e={}){const n=JSON.parse(JSON.stringify(this.dialogInfo));o&&console.info(`【 DialogManager log 】${n.name} 被关闭`),Object.keys(this._eventFn.close).forEach((t=>{o&&console.info(`【 DialogManager log 】close 事件监听函数 ${t} 被触发`,n),this._eventFn.close[t].fn(n,e),this._eventFn.close[t]&&this._eventFn.close[t].once&&(this._eventFn.close[t].fn=()=>{},o&&console.info(`【 DialogManager log 】close 事件监听函数 ${t} 被移除`,n))}))}on(e,n=(()=>{}),t={namespace:"",once:!1}){return"string"==typeof e&&e?"function"!=typeof n?(console.error("【 DialogManager.on error 】 fn must be a function!"),this):this._supportEvents.indexOf(e)<0?(console.error('【 DialogManager.on error 】 event only supports "show"、"close"!'),this):(t.namespace||(t.namespace=`${e}_fn_${Object.keys(this._eventFn[e]).length+1}`),o&&console.info(`【 DialogManager log 】注册 ${e} 事件监听函数 ${t.namespace}`,t),this._eventFn[e][t.namespace]={fn:n,once:t.once},this):(console.error("【 DialogManager.on error 】 event must be a string!"),this)}off(e="show",n=""){return e?this._supportEvents.indexOf(e)<0?(console.error('【 DialogManager.off error 】 event only supports "show"、"close"!'),this):""===n?(o&&console.info(`【 DialogManager log 】移除 ${e} 事件所有监听函数`),this._eventFn[e]={},this):(o&&console.info(`【 DialogManager log 】移除 ${e} 事件监听函数 ${n}`),this._eventFn[e][n].fn=()=>{},this):(o&&console.info("【 DialogManager log 】移除所有事件监听函数"),this._eventFn={show:{},close:{}},this)}}var i=new class{constructor(){this._dialogs={__DEFAULT__:new s},this._activated="__DEFAULT__"}debug(){o=!0}init(e="__DEFAULT__"){return o&&console.info(`【 DialogManager log 】初始化弹窗实例 ${e}`),this._dialogs[e]=new s,this.use(e),this}use(e="__DEFAULT__"){return o&&console.info(`【 DialogManager log 】激活弹窗实例 ${e}`),this._activated=e,this}show(e){return""===e.name?(console.error("【 DialogManager.show error 】 dialogInfo.name cannot be empty!"),this):(this._dialogs[this._activated].show(e),this)}close(e={}){return this._dialogs[this._activated].close(e),this}on(e,n=(()=>{}),t={namespace:"",once:!1}){return this._dialogs[this._activated].on(e,n,t),this}off(e,n=""){return this._dialogs[this._activated].off(e,n),this}};let r=!1;var a=new class{constructor(){this._events={}}debug(){r=!0}batch(e=[],n=""){return e.forEach((e=>{this.on(e[0],e[1],n)})),this}on(e={eventName:"",payloadFn:()=>!0,trigger:[],listener:{}},n,t){const{eventName:o,listener:s,payloadFn:i,trigger:a}=e;return o?"function"!=typeof n?(console.error("【 EventManager on error 】 fn must be a function!"),this):s[t]?(this._events[o]||(this._events[o]={eventName:o,payloadFn:i,trigger:a,listener:s},r&&console.info(`【 EventManager log 】监听者 ${t} 创建了 ${o} 事件`,this._events[o])),this._events[o].listener[t].fn=n,r&&console.info(`【 EventManager log 】监听者 ${t} 注册了 ${o} 事件监听函数`,this._events[o].listener[t]),this):(console.error(`【 EventManager on error 】 ${t} not found in eventInfo.listener!`),this):(console.error("【 EventManager on error 】 eventInfo.eventName cannot be empty!"),this)}emit(e={eventName:"",payloadFn:()=>!0,trigger:[],listener:{}},n,t){const{eventName:o,payloadFn:s,trigger:i,listener:a}=e;return o?"function"!=typeof s?(console.error("【 EventManager emit error 】 eventInfo.payloadFn must be a function!"),this):i.find((e=>e===t))?s(n)?this._events[o]?(r&&console.info(`【 EventManager log 】${t} 触发了 ${o} 事件`,n,{eventName:o,payloadFn:s,trigger:i,listener:a}),Object.keys(this._events[o].listener).forEach((e=>{r&&console.info(`【 EventManager log 】${o} 事件监听者 ${e} 被触发`,n),this._events[o].listener[e].fn?this._events[o].listener[e].fn(n):console.warn(`【 EventManager emit warn 】 ${o} 事件监听者 ${e} 尚未注册!`),this._events[o].listener[e].once&&(this._events[o].listener[e].fn=()=>{},r&&console.info(`【 EventManager log 】${o} 事件监听者 ${e} 被移除`,n))})),this):(console.warn(`【 EventManager emit warn 】 ${o} 事件尚未创建!`),this):(console.error("【 EventManager emit error 】 Invalid payload parameter"),this):(console.error(`【 EventManager emit error 】 ${t} no permission to trigger!`),this):(console.error("【 EventManager emit error 】 eventInfo.eventName cannot be empty!"),this)}off(e="",n){return""===e?(r&&console.info("【 EventManager log 】移除所有事件监听函数"),this._events={},this):""===n?(r&&console.info(`【 EventManager log 】移除 ${e} 事件所有监听函数`),delete this._events[e].listener,this):(r&&console.info(`【 EventManager log 】移除 ${e} 事件监听函数 ${n}`),this._events[e].listener[n].fn=()=>{},this)}};let c=!1;class h{constructor(e="",n=0){this._timer=null,this._progressTime=0,this._progressCount=0,this._startTime=0,this._supportEvents=["progress","end"],this._eventFn={progress:{},end:{}},this._name=e,this._time=n}run(e=0,n=0){return c&&console.info(`【 TimeManager log 】启动定时器实例 ${this._name}，时长 ${e}`),this._reset(e,n),this._next(),this}_reset(e=0,n=0){c&&console.info(`【 TimeManager log 】重置定时器实例 ${this._name} 基础参数`),this._timer&&(clearTimeout(this._timer),this._timer=null),this._progressCount=0,this._startTime=Date.now(),this._time=e,this._progressTime=n}_next(){if(this._time>0){this._execProgress();let e=Date.now()-(this._startTime+this._progressCount*this._progressTime),n=this._progressTime>0&&this._progressTime<=this._time?this._progressTime-e:this._time-e;n<0&&(n=0),this._timer=setTimeout((()=>{this._progressTime>0&&this._progressTime<=this._time?(this._time-=this._progressTime,this._progressCount++):this._time=0,this._next()}),n)}else this._reset(),this._execEnd("end")}_toEnd(){this._time=0}_execProgress(){this._progressTime&&Object.keys(this._eventFn.progress).forEach((e=>{c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, progress 事件监听函数 ${e} 被触发`),this._eventFn.progress[e].fn(this._time,this._toEnd.bind(this)),this._eventFn.progress[e]&&this._eventFn.progress[e].once&&(this._eventFn.progress[e].fn=()=>{},c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, progress 事件监听函数 ${e} 被移除`))}))}_execEnd(e="end"){Object.keys(this._eventFn.end).forEach((n=>{("end"===e||"stop"===e&&this._eventFn.end[n].exec)&&(c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, end 事件监听函数 ${n} 被触发`),this._eventFn.end[n].fn(),this._eventFn.end[n]&&this._eventFn.end[n].once&&(this._eventFn.end[n].fn=()=>{},c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, end 事件监听函数 ${n} 被移除`)))}))}on(e,n=(()=>{}),t={namespace:"",once:!1,exec:!1}){return"string"==typeof e&&e?"function"!=typeof n?(console.error("【 TimeManager Time.on error 】 fn must be a function!"),this):this._supportEvents.indexOf(e)<0?(console.error('【 TimeManager Time.on error 】 event only supports "progress"、"end"!'),this):(t.namespace||(t.namespace=`${e}_fn_${Object.keys(this._eventFn[e]).length+1}`),c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, 注册 ${e} 事件监听函数 ${t.namespace}`,t),this._eventFn[e][t.namespace]={fn:n,once:t.once,exec:t.exec},this):(console.error("【 TimeManager Time.on error 】 event must be a string!"),this)}off(e,n=""){return e?this._supportEvents.indexOf(e)<0?(console.error('【 TimeManager Time.off error 】 event only supports "progress"、"end"!'),this):""===n?(c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, 移除 ${e} 事件所有监听函数`),this._eventFn[e]={},this):(c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, 移除 ${e} 事件监听函数 ${n}`),this._eventFn[e][n].fn=()=>{},this):(c&&console.info(`【 TimeManager log 】定时器实例 ${this._name}, 移除所有事件监听函数`),this._eventFn={progress:{},end:{}},this)}_stop(){return c&&console.info(`【 TimeManager log 】定时器实例 ${this._name} 停止`),this._time&&(this._reset(),this._execEnd("stop")),Promise.resolve()}}var l=new class{constructor(){this._timers={__DEFAULT__:new h("__DEFAULT__")}}debug(){c=!0}timer(e="__DEFAULT__"){return this._timers[e]?c&&console.info(`【 TimeManager log 】获取定时器实例 ${e}`):(this._timers[e]=new h(e),c&&console.info(`【 TimeManager log 】创建定时器实例 ${e}`)),this._timers[e]}stop(e=""){if(e)this._timers[e]&&this._timers[e]._time>0&&this._timers[e]._stop().then((()=>this.stop(e)));else{let e=Object.values(this._timers).sort(((e,n)=>e._time-n._time)).find((e=>e._time>0));e&&this._timers[e._name]._stop().then((()=>this.stop()))}return this}};class g{constructor(e,{selectorsArr:n=[],renderFn:t=(()=>{}),options:o={}}){this.intersectedArr=[],this._observer=swan.createIntersectionObserver(e,{selectAll:!0}),this.num=n.length,this.watch(n,t,o)}watch(e=[],n=(()=>{}),{type:t="relativeToViewport",selector:o="",margins:s={}}){swan.nextTick((()=>{this._observer[t]("relativeToViewport"===t?s:o).observe(e.join(","),(e=>{e.intersectionRatio&&(this.intersectedArr.includes(e.id)||(n(e),this.intersectedArr.push(e.id),this.intersectedArr.length>=this.num&&this.off()))}))}))}off(){this._observer.disconnect(),this.intersectedArr=[],this.num=0}}var _=new class{constructor(){this._observerList=[]}watch(e,n={selectorsArr:[],renderFn:()=>{},options:{}}){var t;if(!e)return void console.error("【 IntersectionManager log 】pageContext is required");if((null===(t=null==n?void 0:n.selectorsArr)||void 0===t?void 0:t.length)<=0)return void console.error("【 IntersectionManager log 】params.selectorsArr is empty");return this._observerList.push(new g(e,n))-1}off(e){var n;e>0?null===(n=this._observerList[e])||void 0===n||n.off():(this._observerList.forEach((e=>{e.off()})),this._observerList=[])}};exports.ActionManager=t,exports.DialogManager=i,exports.EventManager=a,exports.IntersectionManager=_,exports.TimeManager=l;
